generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type BlocksResult {
  basefeepergas        BigInt
  gaslimit             BigInt
  gasused              BigInt
  hash                 String
  number               BigInt
  parenthash           String
  protocoltransactions BlocksResultProtocoltransactions[]
  receiptsroot         String
  stateroot            String
  timestamp            BigInt
  transactions         BlocksResultTransactions[]
  transactionsroot     String
}

type BlocksResultProtocoltransactions {
  attestorreward      String
  blockhash           String
  blocknumber         String
  blockproposerreward String
  chainid             String
  feereward           String
  from                String
  hash                String
  nonce               String
  pk                  String
  signature           String
  transactionindex    String
  type                String
}

type BlocksResultTransactions {
  blockhash        String
  blocknumber      String
  chainid          String
  data             String
  from             String
  gas              String
  gasprice         String
  hash             String
  nonce            String
  pk               String
  signature        String
  status           String
  to               String
  transactionindex String
  type             String
  value            String
}

model addresses {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  balance    BigInt
  id_        Bytes    @map("id")
  isContract Boolean?
  nonce      BigInt?
}

model bitfield {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  address_pagenumber String
  ots_bitfield       Bytes
}

model blocks {
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  id_     Int          @map("id")
  jsonrpc String
  result  BlocksResult

  @@index([result.number(sort: Desc), result.timestamp], map: "result.number_-1_result.timestamp_1")
}

model coingecko {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  marketCapUSD Float
}

model contractCode {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  contractAddress        Bytes
  contractCode           Bytes
  contractCreatorAddress Bytes
}

model dailyTransactionsVolume {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  volume BigInt
}

model totalCirculatingSupply {
  id          String @id @map("_id")
  circulating String
}

model transactionByAddress {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  address   Bytes
  amount    BigInt
  blockNr   Bytes
  inOut     BigInt
  timeStamp BigInt
  txHash    Bytes
  txType    Int
}

model transfer {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  contractAddress Bytes?
  data            Bytes?
  from            Bytes
  nonce           BigInt
  pk              Bytes
  signature       Bytes
  status          Int
  to              Bytes?
  txHash          Bytes
  value           BigInt
}

model walletCount {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  count BigInt
}

model challenge {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    blockchain_address  String @unique
    challenge           String @unique
    timestamp           DateTime @default(now())
    status              Int 
}