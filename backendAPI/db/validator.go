package db

import (
	"backendAPI/configs"
	"backendAPI/models"
	"context"
	"fmt"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

func ReturnValidators(pageToken string) (models.AutoGenerated, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	var result models.AutoGenerated
	filter := primitive.D{}

	// If page token is provided, add it to the filter
	if pageToken != "" {
		filter = append(filter, primitive.E{Key: "page_token", Value: pageToken})
	}

	err := configs.ValidatorsCollections.FindOne(ctx, filter).Decode(&result)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(result)

	return result, err
}

// CountValidators returns the total number of validators
func CountValidators() (int64, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	var result models.AutoGenerated
	err := configs.ValidatorsCollections.FindOne(ctx, bson.M{}).Decode(&result)
	if err != nil {
		return 0, fmt.Errorf("failed to get validator document: %v", err)
	}

	// Count validators in all slots
	count := int64(0)
	for _, slot := range result.Resultvalidator.Validatorsbyslotnumber {
		// Count leader
		if slot.Leader != "" {
			count++
		}
		// Count attestors
		count += int64(len(slot.Attestors))
	}

	return count, nil
}
